{"version":3,"sources":["components/Jumbotron.js","components/Square.js","components/Gameboard.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","colorOptions","Square","style","backgroundColor","Math","floor","random","onClick","handleClick","Gameboard","score","highscore","components_Square","highestScore","currentScore","GameContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","console","log","target","color","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","state","clicked","Symbol","iterator","next","done","value","youLose","err","return","setState","concat","toConsumableArray","emptyArray","arr","length","getInitialState","components_Gameboard","Component","App","components_Jumbotron","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06fdfdea.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Jumbotron = props => (\n  <div className=\"jumbotron text-center\">\n    <h1>Welcome to Color Memory!</h1>\n    <p className=\"lead\">Click on the colored squares. If you click on the same color twice, you lose! See how far you can get.</p>\n  </div>\n);\n\nexport default Jumbotron;","import React from \"react\";\nimport \"../styles/Square.css\";\n\nconst colorOptions = [\"#05F4F9\", \"#0ABEF6\", \"#0F8CF3\", \"#145DF0\", \"#1832ED\", \"#311DEA\", \"#5F22E7\", \"#8926E4\", \"#B12AE1\", \"#D52EDE\", \"#DB33BE\", \"#DB336B\", \"#DB334C\", \"#DB3833\", \"#DB5733\", \"#DB7733\", \"#DB9633\", \"#DBB533\", \"#DBD533\", \"#C1DB33\", \"#A2DB33\", \"#82DB33\"];\n\nconst Square = props => (\n  <div className=\"square shadow rounded\" style={{ backgroundColor: colorOptions[Math.floor(Math.random() * 22)] }} onClick={props.handleClick} ></div>\n);\n\n\nexport default Square;","import React from \"react\";\nimport Square from \"./Square\"\n\nconst Gameboard = props => (\n\n  <div className=\"container text-center\">\n  <p>Your current score: {props.score} | Your high score: {props.highscore}</p>\n    <div className=\"row mb-5\">\n      <div className=\"col col-3\" >\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n    </div>\n    <div className=\"row mb-5\">\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n      <div className=\"col col-3\">\n        <Square handleClick={props.handleClick} />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Gameboard;","import React, { Component } from \"react\";\nimport Gameboard from \"./Gameboard\"\n\nlet highestScore = 0;\nlet currentScore = 0;\n\n\nclass GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n\n  getInitialState() {\n    return {\n      clicked: []\n    }\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    console.log(event.target.style.backgroundColor);\n    let color = event.target.style.backgroundColor\n    for (const value of this.state.clicked) {\n      if (value === color) {\n        this.youLose();\n      }\n    }\n    currentScore ++;\n    this.setState({ clicked: [...this.state.clicked, event.target.style.backgroundColor] });\n    console.log(currentScore);\n  }\n\n  youLose = () => {\n    console.log(\"you lost!\");\n    if (currentScore > highestScore) {\n      highestScore = currentScore;\n    }\n    this.emptyArray(this.state.clicked);\n    console.log(this.state.clicked);\n    return currentScore = 0;\n\n  }\n\n  emptyArray = (arr) => {\n    return arr.length = 0;\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Gameboard handleClick={this.handleClick} score={currentScore} highscore={highestScore} />\n      </div>\n    );\n  }\n\n};\n\nexport default GameContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport GameContainer from './components/GameContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Jumbotron />\n        <GameContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}